package enum

const tmp = `// Code generated by github.com/infraboard/mcube 
// DO NOT EDIT

package {{.PKG}}

import (
	"bytes"
	"fmt"
	"strings"
)

{{- range .Enums.Items }}
var (
	enum{{.Name}}ShowMap = map[{{.Name}}]string{
{{- range .Items }}
	{{.Name}}: "{{.Show}}",
{{- end}}
	}

	enum{{.Name}}IDMap = map[string]{{.Name}}{
{{- range .Items }}
		"{{.Show}}": {{.Name}},
{{- end}}
	}
)

// Parse{{.Name}} Parse {{.Name}} from string
func Parse{{.Name}}(str string) ({{.Name}}, error) {
	key := strings.Trim(string(str), {{$.Backquote}}"{{$.Backquote}})
	v, ok := enum{{.Name}}IDMap[key]
	if !ok {
		return 0, fmt.Errorf("unknown Status: %s", str)
	}

	return v, nil
}

// Is todo
func (t {{.Name}}) Is(target {{.Name}}) bool {
	return t == target
}

// String stringer
func (t {{.Name}}) String() string {
	v, ok := enum{{.Name}}ShowMap[t]
	if !ok {
		return "unknown"
	}

	return v
}

{{ if $.Marshal }}
// MarshalJSON todo
func (t {{.Name}}) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString({{$.Backquote}}"{{$.Backquote}})
	b.WriteString(t.String())
	b.WriteString({{$.Backquote}}"{{$.Backquote}})
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *{{.Name}}) UnmarshalJSON(b []byte) error {
	ins, err := Parse{{.Name}}(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}
{{end}}
{{- end}}`
